{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","Decks/CreateDeckButton.js","Decks/Deck.js","Decks/DeckList.js","utils/api/index.js","Cards/Card.js","Cards/CardList.js","Decks/ViewDeck.js","Cards/StudyCards.js","Cards/NotEnoughCards.js","Decks/StudyDeck.js","Decks/DeckForm.js","Decks/Create-EditDeck.js","Cards/CreateCard.js","Cards/EditCard.js","Layout/Decks.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","CreateDeckButton","to","Deck","deck","deleteDeckHandler","name","cards","length","description","id","type","onClick","DeckList","decks","map","API_BASE_URL","process","headers","Headers","stripCards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","append","Card","history","useHistory","deleteCardHandler","cardIdToDelete","window","confirm","deleteCard","go","front","back","CardList","ViewDeck","StudyCards","cardIndex","cardFront","flipButtonHandler","nextButtonHandler","NotEnoughCards","StudyDeck","useState","setCardIndex","setCardFront","event","push","DeckForm","formData","handleSubmit","handleChange","handleCancel","onSubmit","htmlFor","onChange","value","placeholder","rows","CreateEditDeck","path","useRouteMatch","newDeckPath","setFormData","useEffect","log","preventDefault","target","CreateCard","useParams","initialFormState","EditCard","setCard","cardFromAPI","loadCard","parseFloat","Decks","setDeck","setCards","deckFromAPI","loadDecks","cardsLength","Layout","setDecks","deckIdToDelete","deleteDeck","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.790be3b4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//simple button that links to the path \"/decks/new\"\r\n\r\nfunction CreateDeckButton() {\r\n  return (\r\n    <div>\r\n      <Link to=\"/decks/new\" className=\"btn btn-secondary\">\r\n        &#10133; Create Deck\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateDeckButton;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Deck({ deck, deleteDeckHandler }) {\r\n\r\n  //display the information of a specific deck with our deleteDeckHandler attached to the delete button, used in decklists to create a list of decks for the homepage.\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>\r\n            <h5 className=\"card-title\">{deck.name}</h5>\r\n          </div>\r\n          <div >\r\n            <p className=\"text-secondary\">{deck.cards.length} cards</p>\r\n          </div>\r\n        </div>\r\n        <p className=\"card-text\">{deck.description}</p>\r\n        <Link to={`/decks/${deck.id}`} className=\"btn btn-secondary mr-2\">\r\n          &#x1f441;View\r\n        </Link>\r\n        <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary\">\r\n          &#128218;Study\r\n        </Link>\r\n        <button className=\"btn btn-danger float-right\" type=\"submit\" onClick={() => deleteDeckHandler(deck.id)}>&#x1f5d1;</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Deck;\r\n","import React from \"react\";\r\nimport Deck from \"./Deck\";\r\n\r\n//maps out our Deck component to create a list of decks from our array of decks in our props.\r\n\r\nfunction DeckList({ decks, deleteDeckHandler }) {\r\n  return (\r\n    <div>\r\n      {decks.map((deck) => (\r\n        <Deck deck={deck} key={deck.id} deleteDeckHandler={deleteDeckHandler}/>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeckList;\r\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { deleteCard } from \"../utils/api\";\r\n\r\n//CardList calls this component to create each card in its list.\r\n\r\nfunction Card({ card }) {\r\n  const history = useHistory();\r\n\r\n  //our delete handler will open a window to confirm if we want to delete our card with a warning, if confirmed then deleteCard from the APi will remove the card based on its cardId and then the page will refresh.\r\n  const deleteCardHandler = (cardIdToDelete) => {\r\n    if (\r\n      window.confirm(\"Delete this card? You will not be able to recover it.\")\r\n    ) {\r\n      deleteCard(cardIdToDelete);\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"container\">\r\n        <div className=\"row pb-2 pt-2\">\r\n          <div className=\"col\">{card.front}</div>\r\n          <div className=\"col\">{card.back}</div>\r\n        </div>\r\n        <div className=\"d-flex row justify-content-end m-2\">\r\n          <Link\r\n            to={`/decks/${card.deckId}/cards/${card.id}/edit`}\r\n            className=\"btn btn-secondary text-white\"\r\n          >\r\n            &#128393; Edit\r\n          </Link>\r\n          <button\r\n            className=\"btn btn-danger ml-2\"\r\n            onClick={() => deleteCardHandler(card.id)}\r\n          >\r\n            {\" \"}\r\n            &#x1f5d1;{\" \"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\n//this component maps out our cards array into a rendered list of card information.\r\nfunction CardList({ cards }) {\r\n  if (!cards) return <p> loading... </p>\r\n    return (\r\n      <>\r\n        {cards.map((card) => (\r\n          <Card card={card} key={card.id} />\r\n        ))}\r\n      </>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CardList from \"../Cards/CardList\";\r\n\r\n//renders a the information of a single deck, with multiple buttons attached to manipulate the data of the deck, or study the information contained. Renders our CardList component below to display the same information and similar buttons on the cards.\r\n\r\nfunction ViewDeck( { deck, cards, deleteDeckHandler }) {\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\"> \r\n            {deck.name}\r\n          </li> \r\n        </ol>\r\n      </nav>\r\n      <div className=\"mt-2 mb-3\">\r\n        <h5 className=\"card-title\">{deck.name}</h5>\r\n        <p className=\"card-text\">{deck.description}</p>\r\n        <Link to={`/decks/${deck.id}/edit`} className=\"btn btn-secondary mr-2\">\r\n          &#128393; Edit\r\n        </Link>\r\n        <Link to={`/decks/${deck.id}/study`} className=\"btn btn-primary mr-2\">\r\n          &#128218;Study\r\n        </Link>\r\n        <Link to={`/decks/${deck.id}/cards/new`} className=\"btn btn-primary\">\r\n          &#10133; Add Cards\r\n        </Link>\r\n        <button\r\n          className=\"btn btn-danger float-right\"\r\n          type=\"submit\"\r\n          onClick={() => deleteDeckHandler(deck.id)}\r\n        >\r\n          &#x1f5d1;\r\n        </button>\r\n      </div>\r\n      <div>\r\n        <h2>Cards</h2>\r\n        <CardList cards={cards} key={deck.id} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ViewDeck;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//renders in a single cards information to be studied, using logic in the html to show only the front or backside depending on the value of \"cardFront\"\r\n\r\nfunction StudyCards({\r\n  deck,\r\n  cards,\r\n  cardIndex,\r\n  cardFront,\r\n  flipButtonHandler,\r\n  nextButtonHandler,\r\n}) {\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\" aria-current=\"page\">\r\n            <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <div className=\"mt-2 mb-3\">\r\n        <h2>Study: {deck.name}</h2>\r\n        <div className=\"card\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">\r\n              Card {cardIndex + 1} of {cards.length}\r\n            </h4>\r\n            <div>\r\n              {cardFront ? (\r\n                <>\r\n                  <p className=\"card-text m-2\">{cards[cardIndex].front}</p>\r\n                  <button\r\n                    className=\"btn btn-secondary m-1\"\r\n                    onClick={flipButtonHandler}\r\n                  >\r\n                    Flip\r\n                  </button>\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <p className=\"card-text m-2\">{cards[cardIndex].back}</p>\r\n                  <button\r\n                    className=\"btn btn-secondary m-1\"\r\n                    onClick={flipButtonHandler}\r\n                  >\r\n                    Flip\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-primary m-1\"\r\n                    onClick={nextButtonHandler}\r\n                  >\r\n                    Next\r\n                  </button>\r\n                </>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudyCards;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//displays the page warning of a deck having less than 3 cards, only renders from StudyDeck\r\nfunction NotEnoughCards({deck}) {\r\n    return (\r\n      <div>\r\n        <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">\r\n              <span className=\"oi oi-home\" /> Home\r\n            </Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Study\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n        <h1>Study: {deck.name}</h1>\r\n        <p />\r\n        <h2>Not enough cards.</h2>\r\n        <p>You need at least 3 cards to study.</p>\r\n\r\n        <Link to={`/decks/${deck.id}/cards/new`}>\r\n          <button type=\"button\" className=\"btn btn-primary\">\r\n            Add Cards\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default NotEnoughCards;","import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport StudyCards from \"../Cards/StudyCards\";\r\nimport NotEnoughCards from \"../Cards/NotEnoughCards\";\r\n\r\n\r\nfunction StudyDeck({ deck, cards }) {\r\n  const [cardIndex, setCardIndex] = useState(0);\r\n  const [cardFront, setCardFront] = useState(true);\r\n  const history = useHistory();\r\n\r\n\r\n  //   flip button\r\n  const flipButtonHandler = (event) => {\r\n    if (cardFront === true) {\r\n      setCardFront(false);\r\n    } else {\r\n      setCardFront(true);\r\n    }\r\n  };\r\n\r\n  //next button\r\n  const nextButtonHandler = (event) => {\r\n    setCardIndex(cardIndex + 1);\r\n    if (cardIndex === cards.length - 1) {\r\n      if (\r\n        window.confirm(\r\n          \"Restart cards? Click 'cancel' to return to the home page.\"\r\n        )\r\n      ) {\r\n        setCardIndex(0);\r\n        setCardFront(true);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    } else {\r\n      setCardIndex(cardIndex + 1);\r\n      setCardFront(true);\r\n    }\r\n  };\r\n\r\n  //renders either our StudyCards component or NotEnoughCards if we have les than 3 cards in a deck.\r\n  //StudyCards has many props from the StudyDeck component in order to keep our pages and nested components in better sync and solve a few performance issues.\r\n  return (\r\n    <>\r\n      {deck && cards.length >= 3 ? (\r\n        <StudyCards\r\n          deck={deck}\r\n          cards={cards}\r\n          cardIndex={cardIndex}\r\n          cardFront={cardFront}\r\n          flipButtonHandler={flipButtonHandler}\r\n          nextButtonHandler={nextButtonHandler}\r\n        />\r\n      ) : (\r\n        <NotEnoughCards deck={deck} />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudyDeck;\r\n","import React from \"react\";\r\n\r\n\r\n//this componetent was made to be shared between creating and editing decks\r\nfunction DeckForm({ formData, handleSubmit, handleChange, handleCancel }) {\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"name\" className=\"form-label mt-2\">\r\n          Name\r\n        </label>\r\n        <input\r\n          id=\"name\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          onChange={handleChange}\r\n          value={formData.name}\r\n          placeholder=\"Deck Name\"\r\n          className=\"form-control\"\r\n        />\r\n        <label htmlFor=\"description\" className=\"form-label mt-2\">\r\n          Description\r\n        </label>\r\n        <textarea\r\n          id=\"description\"\r\n          name=\"description\"\r\n          onChange={handleChange}\r\n          value={formData.description}\r\n          rows=\"4\"\r\n          placeholder=\"Brief description of the deck\"\r\n          className=\"form-control\"\r\n        />\r\n        <button\r\n          className=\"btn btn-secondary mt-3 mr-1\"\r\n          type=\"reset\"\r\n          onClick={() => handleCancel()}\r\n        >\r\n          {\" \"}\r\n          Cancel{\" \"}\r\n        </button>\r\n        <button className=\"btn btn-primary mt-3 ml-1\" type=\"submit\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DeckForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useRouteMatch } from \"react-router-dom\";\r\nimport { updateDeck, readDeck, createDeck } from \"../utils/api\";\r\nimport DeckForm from \"./DeckForm\";\r\n\r\n\r\n//initialformstate helps control our forms before inputs\r\n\r\nfunction CreateEditDeck({ deck }) {\r\n  const { path } = useRouteMatch();\r\n  const newDeckPath = \"/decks/new\";\r\n  const history = useHistory();\r\n  const initialFormState = { name: \"\", description: \"\" };\r\n  const [formData, setFormData] = useState(initialFormState);\r\n\r\n  // this useEffect will set our form data to the existing decks data if there is one (from edit deck)\r\n  useEffect(() => {\r\n    if (deck) {\r\n      setFormData(() => ({\r\n        name: deck.name,\r\n        description: deck.description,\r\n        cards: deck.cards,\r\n        id: deck.id,\r\n      }));\r\n    }\r\n    console.log(formData);\r\n  }, [deck]);\r\n\r\n  //when anything is input into either field the value is stored in formData state and that input value changes to the same as the form with the based on the target key.\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [event.target.name]: value,\r\n    });\r\n  };\r\n\r\n  //on submit this will either update our exisiting deck or create a new one after looking at our path to determine what page we rendered from then render the page of the deck we created/edited with useHistory,\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let response;\r\n    path === newDeckPath\r\n      ? (response = await createDeck(formData))\r\n      : (response = await updateDeck(formData));\r\n    await readDeck(response.id);\r\n    history.push(`/decks/${response.id}`);\r\n    history.go(0);\r\n  };\r\n\r\n  const handleCancel = (event) => {\r\n    path === newDeckPath ? history.push(\"/\") : history.push(`/decks/${deck.id}`);\r\n  };\r\n\r\n  // our return below has a some lines of inline logic to determine what text is rendered on the screen based on our path and then our DeckForm is rendered.\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          {path === newDeckPath ? (\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Create Deck\r\n            </li>\r\n          ) : (\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n              Edit Deck\r\n            </li>\r\n          )}\r\n        </ol>\r\n      </nav>\r\n      <div>\r\n        {path === newDeckPath ? <h2>Create Deck</h2> : <h2>Edit Deck</h2>}\r\n        <DeckForm\r\n          formData={formData}\r\n          handleSubmit={handleSubmit}\r\n          handleChange={handleChange}\r\n          handleCancel={handleCancel}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateEditDeck;\r\n","import React, { useState } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { createCard, readDeck } from \"../utils/api\";\r\n\r\nfunction CreateCard({deck}) {\r\n  const history = useHistory();\r\n  const {deckId} = useParams(); \r\n  const initialFormState = {\r\n    front: \"\",\r\n    back: \"\",\r\n    deckId: deckId,\r\n  };\r\n\r\n  const [formData, setFormData] = useState({ ...initialFormState });\r\n\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  }\r\n //submitting our form will use the creatCard API function to create a new card in our current deck from our formData\r\n  const handleSubmit = async (event) =>{\r\n    event.preventDefault();\r\n    const response = await createCard(deckId, formData);\r\n    await readDeck(deckId);\r\n    history.go(0);\r\n    history.push(`/decks/${response.id}`);\r\n}\r\n\r\n  return (\r\n    <>\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item\">\r\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n          </li>\r\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n            Add Card\r\n          </li>\r\n        </ol>\r\n      </nav>\r\n      <div>\r\n        <h4>{deck.name}: Add Card</h4>\r\n        <form onSubmit={handleSubmit}>\r\n          <label htmlFor=\"front\" className=\"form-label mt-2\">\r\n            Front\r\n          </label>\r\n          <textarea\r\n            id=\"front\"\r\n            name=\"front\"\r\n            onChange={handleChange}\r\n            value={formData.description}\r\n            rows=\"2\"\r\n            placeholder=\"Front side of card\"\r\n            className=\"form-control\"\r\n          />\r\n          <label htmlFor=\"back\" className=\"form-label mt-2\">\r\n            Back\r\n          </label>\r\n          <textarea\r\n            id=\"back\"\r\n            name=\"back\"\r\n            onChange={handleChange}\r\n            value={formData.description}\r\n            rows=\"2\"\r\n            placeholder=\"Back side of card\"\r\n            className=\"form-control\"\r\n          />\r\n          <input className=\"btn btn-secondary mt-3 mr-1\" type=\"reset\" value=\"Done\" onClick={() => history.push(`/decks/${deckId}`)}></input>\r\n          <input className=\"btn btn-primary mt-3 ml-1\" type=\"submit\" value=\"Save\"></input>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CreateCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { updateCard, readDeck, readCard } from \"../utils/api\";\r\n\r\n//renders a form to edit a card using the cardId params of the parent component.\r\n\r\nfunction EditCard({deck}) {\r\n  const history = useHistory();\r\n  const { deckId, cardId } = useParams();\r\n  const [card, setCard] = useState({});\r\n\r\n  useEffect(() => {\r\n    async function loadCard() {\r\n      const response = await readCard(cardId);\r\n      const cardFromAPI = await response;\r\n      setCard(cardFromAPI);\r\n    }\r\n\r\n    loadCard();\r\n  }, [cardId]);\r\n\r\n  //initialFormState will fill in the values of our form to be the same as what they are on the existing card.\r\n  //there was an error in the api index.js so I added parseFloat in the deckId value to correct it.\r\n\r\n  const initialFormState = {\r\n    front: card.front,\r\n    back: card.back,\r\n    deckId: parseFloat(deckId),\r\n    id: cardId,\r\n  };\r\n\r\n  useEffect(() => {\r\n      setFormData({...initialFormState})\r\n  }, [card]);\r\n\r\n  const [formData, setFormData] = useState({});\r\n\r\n  const handleChange = ({ target }) => {\r\n    const value = target.value;\r\n    setFormData({\r\n      ...formData,\r\n      [target.name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const response = await updateCard(formData);\r\n    await readDeck(deckId);\r\n    history.push(`/decks/${response.id}`);\r\n    history.go(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!card ? (\r\n        <p>loading...</p>\r\n      ) : (\r\n        <>\r\n          <nav aria-label=\"breadcrumb\">\r\n            <ol className=\"breadcrumb\">\r\n              <li className=\"breadcrumb-item\">\r\n                <Link to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"breadcrumb-item\">\r\n                <Link to={`/decks/${deckId}`}>{deck.name}</Link>\r\n              </li>\r\n              <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                Edit Card {cardId}\r\n              </li>\r\n            </ol>\r\n          </nav>\r\n          <div>\r\n            <h4>Edit Card</h4>\r\n            <form onSubmit={handleSubmit}>\r\n              <label htmlFor=\"front\" className=\"form-label mt-2\">\r\n                Front\r\n              </label>\r\n              <textarea\r\n                id=\"front\"\r\n                name=\"front\"\r\n                onChange={handleChange}\r\n                value={formData.front}\r\n                rows=\"2\"\r\n                placeholder=\"Front side of card\"\r\n                className=\"form-control\"\r\n              />\r\n              <label htmlFor=\"back\" className=\"form-label mt-2\">\r\n                Back\r\n              </label>\r\n              <textarea\r\n                id=\"back\"\r\n                name=\"back\"\r\n                onChange={handleChange}\r\n                value={formData.back}\r\n                rows=\"2\"\r\n                placeholder=\"Back side of card\"\r\n                className=\"form-control\"\r\n              />\r\n              <input\r\n                className=\"btn btn-secondary mt-3 mr-1\"\r\n                type=\"reset\"\r\n                value=\"Cancel\"\r\n                onClick={() => history.push(`/decks/${deckId}`)}\r\n              ></input>\r\n              <input\r\n                className=\"btn btn-primary mt-3 ml-1\"\r\n                type=\"submit\"\r\n                value=\"Submit\"\r\n              ></input>\r\n            </form>\r\n          </div>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Switch, Route, useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\nimport ViewDeck from \"../Decks/ViewDeck\";\r\nimport StudyDeck from \"../Decks/StudyDeck\";\r\nimport CreateEditDeck from \"../Decks/Create-EditDeck\";\r\nimport CreateCard from \"../Cards/CreateCard\";\r\nimport EditCard from \"../Cards/EditCard\";\r\n\r\n//Decks hold the routing for all components with :deckId paths.\r\n\r\nfunction Decks({ deleteDeckHandler }) {\r\n  //our deck state starts here and is passed from here to all relevant components that require information on the current deckId.\r\n  const [deck, setDeck] = useState([]);\r\n  const [cards, setCards] = useState([]);\r\n  const { deckId } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadDecks() {\r\n      try {\r\n        const response = await readDeck(deckId);\r\n        const deckFromAPI = await response;\r\n        setDeck(deckFromAPI);\r\n      } catch (error) {\r\n        console.log(\"Load deck error: \", error);\r\n      }\r\n    }\r\n    loadDecks();\r\n  }, [deckId]);\r\n\r\n  useEffect(() => {\r\n    setCards(deck.cards);\r\n  }, [deck]);\r\n\r\n  //created logic below to display loading when the deck is still being fetched from the API as not to cause undefined type errors.\r\n\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route path=\"/decks/:deckId/cards/new\">\r\n          <CreateCard deck={deck} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n          <EditCard deck={deck} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/edit\">\r\n          <CreateEditDeck deck={deck} />\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/study\">\r\n          {deck && cards ? (\r\n            <StudyDeck deck={deck} cards={cards} cardsLength={cards.length} />\r\n          ) : (\r\n            <p>loading...</p>\r\n          )}\r\n        </Route>\r\n        <Route path=\"/decks/:deckId/\">\r\n          {deck ? (\r\n            <ViewDeck\r\n              deck={deck}\r\n              cards={cards}\r\n              deleteDeckHandler={deleteDeckHandler}\r\n            />\r\n          ) : (\r\n            <p>loading...</p>\r\n          )}\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Decks;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport CreateDeckButton from \"../Decks/CreateDeckButton\";\nimport DeckList from \"../Decks/DeckList\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport Decks from \"./Decks\";\nimport CreateEditDeck from \"../Decks/Create-EditDeck\";\n\n\nfunction Layout() {\n  const history = useHistory();\n  const [decks, setDecks] = useState([]);\n\n  //our decks array is loaded in and set to state once on the homepage before passing down into our components for further filtering and mapping.\n\n  useEffect(() => {\n    async function loadDecks() {\n      try {\n        const response = await listDecks();\n        setDecks(response);\n      } catch (error) {\n        console.log(\"Load deck error:\", error);\n      }\n    }\n    loadDecks();\n  }, []);\n\n  //when a delete deck button is pressed a confirmation window will appear and upon confirmation will remove the appropriate deckId from the API and return us to the home page, witha refresh to show the updated information.\n  const deleteDeckHandler = (deckIdToDelete) => {\n    if (\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\n    ) {\n      deleteDeck(deckIdToDelete);\n      history.push(\"/\");\n      history.go(0);\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <CreateDeckButton />\n            <DeckList decks={decks} deleteDeckHandler={deleteDeckHandler} />\n          </Route>\n          <Route path=\"/decks/new\">\n            <CreateEditDeck />\n          </Route>\n          <Route path=\"/decks/:deckId\">\n            <Decks decks={decks} deleteDeckHandler={deleteDeckHandler} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}